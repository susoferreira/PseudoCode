#using owl.v4
.whitespace ' ' '\t'
program = stmt-list
stmt-list = stmt*
newline='\n'
#IMPORTANTE EN PSEUDOCODIGO SE PUEDEN MANDAR ARRAYS POR VALOR (COPIAS)
# hay que especificar todas las newlines
# (excepto cuando justo despues va un stmt o stmt-list porque las newlines son stmt 
stmt =
    '\n':newline
     ['ALGORITMO' identifier@program-name newline* variable-declaration-block stmt-list 'FIN' ] : program-declarations
    ['FUNCION' function-header identifier@return_type newline variable-declaration-block stmt-list 'FIN_FUNCION' ] : function
    ['PROCEDIMIENTO' function-header newline variable-declaration-block  stmt-list 'FIN_PROCEDIMIENTO' ] : procedure
    identifier '<-' expr: assignment
    expr\:negate\:parens@array '.' identifier '<-' expr : field-assignment
    expr\:negate\:parens@array [ '[' expr@lookup ']' ] '<-' expr : lookup-assignment
    
'DEVOLVER' expr : return
    [ 'SI' expr 'ENTONCES'?  stmt-list
      ('SI_NO' 'ENTONCES'? stmt-list@else-stmts)? 'FIN_SI' ] : if-then
    [ 'MIENTRAS' expr 'HACER' stmt-list 'FIN_MIENTRAS' ] : while
    [ 'DESDE' (identifier@var '<-')? expr@value 'HASTA'  expr   ('PASO' expr@step)? "HACER" stmt-list 'FIN_DESDE' ] : for
    ['CASO' expr 'SEA' newline (expr@val ':'  stmt-list newline )* ('SI_NO' ':'? stmt-list@case_default) newline 'FIN_CASO']: case
    'break' : break
    'continue' : continue
    expr\:negate\:parens : expr
  


function-header = identifier@name parameter-list@parameters

variable-declaration-block = (constantes-block | tipos-block | variables-block )+  'INICIO'

variables-block = variable-start-tokens variable-declaration{'\n',1+} '\n'+
tipos-block = tipos-start-tokens (struct-declaration|array-declaration){'\n',1+} '\n'*
constantes-block = constantes-start-tokens variable-declaration{'\n',1+} '\n'+
tipos-start-tokens = ('TIPO'|'TIPOS') '\n'
variable-start-tokens = ('VARIABLE'|'VARIABLES') '\n'
constantes-start-tokens = ('CONSTANTE' | 'CONSTANTES') '\n' 
struct-declaration = (identifier@struct_name '=' 'REGISTRO' '\n' variable-declaration{'\n',1+} '\n'  'FIN_REGISTRO' '\n')
variable-declaration = (identifier@var_name{',',1+} ':' variable-type ('=' expr@initial_value)?  )

variable-type = (identifier@var_type | tipo-cadena)
tipo-cadena = 'Cadena' array-size

#los arrays se declaran en tipos xd
array-declaration = identifier@array_name  '=' 'array'  array-size 'de' identifier@array_type

array-size = [ '[' (expr | size-range) ']' ]
size-range = expr@start '..' expr@end

expr =
    string : string
    number : number
    'true' : true
    'false' : false
    identifier : variable
    [ '(' expr? ')' ] : parens
    [ '{' (expr{',',1+} ','?)? '}' ] : array-values
  .operators postfix
    [ '(' expr{','} ')' ] : call 
    [ '[' expr ']' ] : lookup
    '.' identifier : field
  .operators prefix
    '-' : negate
    '!' : not
  .operators infix left
    '*' : times
    '/' : divided-by
    'MOD' : modulus
  .operators infix left
    '+' : plus
    '-' : minus
  .operators infix left
    '=' : equal-to
    '<>' : not-equal-to
    '<' : less-than
    '>' : greater-than
    '<=' : less-than-or-equal-to
    '>=' : greater-than-or-equal-to
  .operators infix left
    'Y' : and
  .operators infix left
    'O' : or

in='E'
out='S'
parameter-list =
    [ '(' (in? ('/' out)? identifier@var-type ':' identifier@var_name){','} ')' ]
.line-comment-token '//'